import asyncio
import json
import os
import random
import time
import shutil
import logging
from collections import Counter
from filelock import FileLock
from twitchio.ext import commands

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

try:
    from settings import TOKEN, CHANNEL, SAVE_FILE
    from consts import MONSTERS, ITEM_DESCRIPTIONS, ITEMS, BLACK_MARKET_ITEMS
except ImportError as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç: {e}")
    raise ImportError(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç: {e}")

def calculate_hp(level):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ HP –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ —É—Ä–æ–≤–Ω—é."""
    return 30 + (level - 1) * 5

def calculate_damage(level):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ —É—Ä–æ–≤–Ω—é."""
    return random.randint(5 + level * 2, 10 + level * 3)

class RPGbot(commands.Bot):
    """Twitch RPG –±–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π —É—Ä–æ–≤–Ω–µ–π, –±–æ–µ–≤, —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏ –∫—Ä–∞–∂–∏."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        super().__init__(token=TOKEN, prefix='!', initial_channels=[CHANNEL])
        self.players = self.load_players()
        self.black_market_items = []
        self.black_market_last_refresh = 0
        self.pending_duels = {}
        self.races = {
            '—á–µ–ª–æ–≤–µ–∫': {'hp_bonus': 5, 'xp_bonus': 0},
            '—ç–ª—å—Ñ': {'hp_bonus': 0, 'xp_bonus': 0.1},
            '–æ—Ä–∫': {'hp_bonus': 10, 'xp_bonus': -0.05}
        }
        self.classes = {
            '–≤–æ–∏–Ω': {'attack_bonus': (2, 5), 'hp_bonus': 10},
            '–º–∞–≥': {'attack_bonus': (0, 3), 'xp_bonus': 0.1},
            '–≤–æ—Ä': {'attack_bonus': (1, 4), 'steal_chance_bonus': 0.05}
        }

    def load_players(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã."""
        if not os.path.exists(SAVE_FILE):
            logging.info(f"–§–∞–π–ª {SAVE_FILE} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –∏–≥—Ä–æ–∫–æ–≤.")
            return {}

        lock = FileLock(f"{SAVE_FILE}.lock")
        with lock:
            try:
                with open(SAVE_FILE, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    if not content:
                        logging.warning(f"–§–∞–π–ª {SAVE_FILE} –ø—É—Å—Ç.")
                        return {}
                    players = json.loads(content)
                    # –î–æ–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
                    default_player = {
                        'level': 1,
                        'xp': 0,
                        'gold': 15,
                        'inventory': [],
                        'equipment': {'weapon': None, 'armor': None, 'helmet': None, 'pet': None, 'amulet': None},
                        'last_xp_time': 0,
                        'last_fight_time': 0,
                        'last_pvp_time': 0,
                        'pvp_wins': 0,
                        'pvp_losses': 0,
                        'prison': False,
                        'prison_until': 0,
                        'race': None,
                        'class': None,
                        'current_hp': None
                    }
                    for user, data in players.items():
                        for key, value in default_player.items():
                            if key not in data:
                                data[key] = value
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º current_hp, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ
                        if data['current_hp'] is None:
                            data['current_hp'] = calculate_hp(data['level']) + self.get_equipment_bonuses(data)[2]
                    return players
            except (json.JSONDecodeError, IOError) as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {SAVE_FILE}: {e}")
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {SAVE_FILE}: {e}")
                return {}

    def save_players(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –≤ JSON-—Ñ–∞–π–ª —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π."""
        lock = FileLock(f"{SAVE_FILE}.lock")
        with lock:
            try:
                # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                if os.path.exists(SAVE_FILE):
                    shutil.copy(SAVE_FILE, f"{SAVE_FILE}.bak")
                    logging.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è {SAVE_FILE}.bak")
                with open(SAVE_FILE, 'w', encoding='utf-8') as f:
                    json.dump(self.players, f, ensure_ascii=False, indent=2)
                logging.info(f"–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {SAVE_FILE}")
            except IOError as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {SAVE_FILE}: {e}")
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {SAVE_FILE}: {e}")

    def try_level_up(self, player):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ XP."""
        leveled_up = False
        while player['xp'] >= player['level'] * 100:
            player['xp'] -= player['level'] * 100
            player['level'] += 1
            leveled_up = True
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ HP –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
            player['current_hp'] = calculate_hp(player['level']) + self.get_equipment_bonuses(player)[2]
        return leveled_up

    def get_equipment_bonuses(self, player):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–Ω—É—Å—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –∏ –∫–ª–∞—Å—Å–∞."""
        equip = player.get('equipment', {})
        attack_bonus_min, attack_bonus_max, hp_bonus = 0, 0, 0

        for slot, item_name in equip.items():
            if item_name and item_name in ITEMS:
                item = ITEMS[item_name]
                ab_min, ab_max = item['attack_bonus'] if isinstance(item['attack_bonus'], tuple) else (item['attack_bonus'], item['attack_bonus'])
                attack_bonus_min += ab_min
                attack_bonus_max += ab_max
                hp_bonus += item.get('hp_bonus', 0)

        # –ë–æ–Ω—É—Å—ã –æ—Ç –∫–ª–∞—Å—Å–∞
        player_class = player.get('class')
        if player_class in self.classes:
            class_info = self.classes[player_class]
            ab_min, ab_max = class_info['attack_bonus'] if isinstance(class_info['attack_bonus'], tuple) else (class_info['attack_bonus'], class_info['attack_bonus'])
            attack_bonus_min += ab_min
            attack_bonus_max += ab_max
            hp_bonus += class_info.get('hp_bonus', 0)

        return attack_bonus_min, attack_bonus_max, hp_bonus

    async def check_cooldown(self, player, key, cooldown, ctx):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–ª–¥–∞—É–Ω –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è."""
        now = time.time()
        last_time = player.get(key, 0)
        if now - last_time < cooldown:
            remain = int(cooldown - (now - last_time))
            await ctx.send(f'{ctx.author.name}, –ø–æ–¥–æ–∂–¥–∏ {remain} —Å–µ–∫—É–Ω–¥.')
            return False
        player[key] = now
        return True

    def refresh_black_market(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —á–µ—Ä–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞."""
        self.black_market_items = random.sample(BLACK_MARKET_ITEMS, k=min(3, len(BLACK_MARKET_ITEMS)))
        self.black_market_last_refresh = time.time()
        logging.info("–ß—ë—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω")

    async def event_ready(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞."""
        print(f'‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ {self.nick}')
        logging.info(f'–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ {self.nick}')

    @commands.command(name='—á–µ—Ä–Ω—ã–π—Ä—ã–Ω–æ–∫')
    async def cmd_black_market(self, ctx):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ —á–µ—Ä–Ω–æ–º —Ä—ã–Ω–∫–µ."""
        now = time.time()
        if now - self.black_market_last_refresh > 600 or not self.black_market_items:
            self.refresh_black_market()

        msg_lines = ['üï∂Ô∏è –¢—ë–º–Ω—ã–π —Ç–æ—Ä–≥–æ–≤–µ—Ü —à–µ–ø—á–µ—Ç:\n–°–µ–≥–æ–¥–Ω—è –≤ –ø—Ä–æ–¥–∞–∂–µ:']
        for idx, item in enumerate(self.black_market_items, start=1):
            msg_lines.append(f'{idx}. {item["name"]} ‚Äî {item["price"]} –∑–æ–ª–æ—Ç–∞ ({item["description"]})')
        msg_lines.append('–ö—É–ø–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É !–∫—É–ø–∏—Ç—å <–Ω–æ–º–µ—Ä>')

        for line in msg_lines:
            await ctx.send(line)

    @commands.command(name='–∫—É–ø–∏—Ç—å')
    async def cmd_buy(self, ctx):
        """–ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç —Å —á–µ—Ä–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞."""
        user = ctx.author.name.lower()
        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
            return

        parts = ctx.message.content.strip().split()
        if len(parts) != 2 or not parts[1].isdigit():
            await ctx.send('–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: !–∫—É–ø–∏—Ç—å <–Ω–æ–º–µ—Ä>')
            return

        choice = int(parts[1]) - 1
        if choice < 0 or choice >= len(self.black_market_items):
            await ctx.send(f'{ctx.author.name}, –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.')
            return

        player = self.players[user]
        item = self.black_market_items[choice]

        if player['gold'] < item['price']:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞.')
            return

        player['gold'] -= item['price']
        player['inventory'].append(item['name'])
        self.save_players()
        logging.info(f"{user} –∫—É–ø–∏–ª {item['name']} –∑–∞ {item['price']} –∑–æ–ª–æ—Ç–∞")

        if item['type'] in ['pet', 'amulet', 'consumable']:
            await ctx.send(f'{ctx.author.name}, —Ç—ã –ø—Ä–∏–æ–±—Ä–µ–ª {item["type"]}: {item["name"]}! '
                          f'–ò—Å–ø–æ–ª—å–∑—É–π {"!–Ω–∞–¥–µ—Ç—å" if item["type"] in ["pet", "amulet"] else "!–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"} {item["name"]}.')
        else:
            await ctx.send(f'{ctx.author.name}, —Ç—ã –∫—É–ø–∏–ª: {item["name"]}')

    @commands.command(name='—Å—Ç–∞—Ä—Ç')
    async def cmd_start(self, ctx):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        user = ctx.author.name.lower()
        if user in self.players:
            await ctx.send(f'{ctx.author.name}, —Ç—ã —É–∂–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É!')
            return

        max_hp = calculate_hp(1)
        self.players[user] = {
            'level': 1,
            'xp': 0,
            'gold': 0,
            'inventory': [],
            'equipment': {'weapon': None, 'armor': None, 'helmet': None, 'pet': None, 'amulet': None},
            'last_xp_time': 0,
            'last_fight_time': 0,
            'last_pvp_time': 0,
            'pvp_wins': 0,
            'pvp_losses': 0,
            'prison': False,
            'prison_until': 0,
            'race': None,
            'class': None,
            'current_hp': max_hp
        }
        self.save_players()
        logging.info(f"–°–æ–∑–¥–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–ª—è {user}")
        await ctx.send(f'{ctx.author.name}, –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω! –£—Ä–æ–≤–µ–Ω—å 1, XP 0, –∑–æ–ª–æ—Ç–æ 0. –í—ã–±–µ—Ä–∏ —Ä–∞—Å—É (!—Ä–∞—Å–∞) –∏ –∫–ª–∞—Å—Å (!–∫–ª–∞—Å—Å).')

    @commands.command(name='—Å—Ç–∞—Ç—É—Å')
    async def cmd_status(self, ctx):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞."""
        parts = ctx.message.content.strip().split()
        target = parts[1].lstrip('@').lower() if len(parts) == 2 else ctx.author.name.lower()

        if target not in self.players:
            await ctx.send(f'{ctx.author.name}, —É {target} –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
            return

        p = self.players[target]
        lvl = p["level"]
        min_bonus, max_bonus, hp_bonus = self.get_equipment_bonuses(p)
        base_min = 5 + lvl * 2
        base_max = 10 + lvl * 3
        dmg_range = f'{base_min + min_bonus}-{base_max + max_bonus}'
        hp = calculate_hp(lvl) + hp_bonus
        current_hp = p.get('current_hp', hp)

        msg = f'{target} ‚Äî –£—Ä–æ–≤–µ–Ω—å {lvl}, XP {p["xp"]}, –ó–æ–ª–æ—Ç–æ {p["gold"]}, –£—Ä–æ–Ω {dmg_range}, HP {current_hp}/{hp}'
        if p.get('race'):
            msg += f', –†–∞—Å–∞: {p["race"]}'
        if p.get('class'):
            msg += f', –ö–ª–∞—Å—Å: {p["class"]}'
        await ctx.send(msg)

        now = time.time()
        status = []
        if p.get('xp_buff_until', 0) > now:
            status.append('üìà +50% XP (–±–æ—Ä–¥–µ–ª—å)')
        if p.get('xp_penalty', False):
            status.append('‚ö†Ô∏è -50% XP (—à—Ç—Ä–∞—Ñ)')
        if p.get('prison', False) and p.get('prison_until', 0) > now:
            remain = int(p['prison_until'] - now)
            status.append(f'üîí –í —Ç—é—Ä—å–º–µ ({remain} —Å–µ–∫.)')
        if p.get('attack_buff_until', 0) > now:
            remain = int(p['attack_buff_until'] - now)
            status.append(f'‚öîÔ∏è +10% —É—Ä–æ–Ω–∞ ({remain} —Å–µ–∫.)')
        if status:
            await ctx.send(f'{target}, –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã: {", ".join(status)}')

    @commands.command(name='–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å')
    async def cmd_inventory(self, ctx):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞."""
        user = ctx.author.name.lower()
        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
            return

        inventory = self.players[user].get('inventory', [])
        if not inventory:
            await ctx.send(f'@{ctx.author.name}, —Ç–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.')
            return

        item_counts = Counter(inventory)
        formatted_items = [f'{item} x{count}' if count > 1 else item for item, count in item_counts.items()]
        await ctx.send(f'@{ctx.author.name}, –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: {", ".join(formatted_items)}')

    @commands.command(name='—ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞')
    async def cmd_equipment(self, ctx):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É –∏–≥—Ä–æ–∫–∞."""
        user = ctx.author.name.lower()
        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
            return

        equipment = self.players[user].get('equipment', {})
        eq_text = ', '.join(
            f'{slot.capitalize()}: {equipment[slot] if equipment[slot] else "‚Äî"}'
            for slot in ['weapon', 'armor', 'helmet', 'pet', 'amulet']
        )
        await ctx.send(f'üõ°Ô∏è –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ {ctx.author.name}: {eq_text}')

    @commands.command(name='–æ–ø—ã—Ç')
    async def cmd_xp(self, ctx):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø—ã—Ç —Å —É—á–µ—Ç–æ–º –∫—É–ª–¥–∞—É–Ω–∞ –∏ –±–∞—Ñ—Ñ–æ–≤."""
        user = ctx.author.name.lower()
        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (!—Å—Ç–∞—Ä—Ç).')
            return

        player = self.players[user]
        if not await self.check_cooldown(player, 'last_xp_time', 300, ctx):
            return

        base_xp = 50
        race_bonus = self.races[player.get('race', '')].get('xp_bonus', 0) if player.get('race') else 0
        class_bonus = self.classes[player.get('class', '')].get('xp_bonus', 0) if player.get('class') else 0

        now = time.time()
        if player.get('xp_buff_until', 0) > now:
            base_xp = int(base_xp * 1.5)
        if player.get('xp_penalty', False):
            base_xp = int(base_xp * 0.5)
        base_xp = int(base_xp * (1 + race_bonus + class_bonus))

        player['xp'] += base_xp
        leveled = self.try_level_up(player)
        self.save_players()
        logging.info(f"{user} –ø–æ–ª—É—á–∏–ª {base_xp} XP")

        msg = f'{ctx.author.name}, –ø–æ–ª—É—á–µ–Ω–æ {base_xp} XP. –¢–µ–∫—É—â–∏–π XP: {player["xp"]}'
        if leveled:
            msg += f' üìà –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–ø–µ—Ä—å —É—Ä–æ–≤–µ–Ω—å {player["level"]}.'
        await ctx.send(msg)

    @commands.command(name='–Ω–∞–¥–µ—Ç—å')
    async def cmd_equip(self, ctx):
        """–ù–∞–¥–µ—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."""
        user = ctx.author.name.lower()
        item_name = ctx.message.content.strip()[7:].strip()

        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
            return

        player = self.players[user]
        if item_name.lower() not in [i.lower() for i in player['inventory']]:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ "{item_name}".')
            return

        if item_name not in ITEMS:
            await ctx.send(f'{ctx.author.name}, –ø—Ä–µ–¥–º–µ—Ç "{item_name}" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–¥–µ—Ç.')
            return

        item_info = ITEMS[item_name]
        slot = item_info['slot']
        if slot == 'consumable':
            await ctx.send(f'{ctx.author.name}, —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è –Ω–∞–¥–µ—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π !–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {item_name}.')
            return

        current_equipped = player['equipment'].get(slot)
        if current_equipped == item_name:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è —É–∂–µ –Ω–∞–¥–µ—Ç "{item_name}".')
            return

        if current_equipped:
            player['inventory'].append(current_equipped)
        player['inventory'].remove(item_name)
        player['equipment'][slot] = item_name
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ HP –ø—Ä–∏ —Å–º–µ–Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        player['current_hp'] = min(player['current_hp'], calculate_hp(player['level']) + self.get_equipment_bonuses(player)[2])
        self.save_players()
        logging.info(f"{user} –Ω–∞–¥–µ–ª {item_name} –≤ —Å–ª–æ—Ç {slot}")

        msg = f'{ctx.author.name}, —Ç—ã –Ω–∞–¥–µ–ª {item_name} –≤ —Å–ª–æ—Ç {slot}.'
        if current_equipped:
            msg = f'{ctx.author.name}, —Ç—ã –∑–∞–º–µ–Ω–∏–ª {current_equipped} –Ω–∞ {item_name} –≤ —Å–ª–æ—Ç–µ {slot}.'
        await ctx.send(msg)

    @commands.command(name='—Å–Ω—è—Ç—å')
    async def cmd_unequip(self, ctx):
        """–°–Ω—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞."""
        user = ctx.author.name.lower()
        parts = ctx.message.content.strip().split(maxsplit=1)

        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
            return

        if len(parts) < 2:
            await ctx.send(f'{ctx.author.name}, —É–∫–∞–∂–∏ —Å–ª–æ—Ç: !—Å–Ω—è—Ç—å <weapon|armor|helmet|pet|amulet>')
            return

        slot = parts[1].strip().lower()
        player = self.players[user]
        if slot not in player['equipment'] or not player['equipment'][slot]:
            await ctx.send(f'{ctx.author.name}, –≤ —Å–ª–æ—Ç–µ "{slot}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–¥–µ—Ç–æ.')
            return

        item_name = player['equipment'][slot]
        player['equipment'][slot] = None
        player['inventory'].append(item_name)
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ HP
        player['current_hp'] = min(player['current_hp'], calculate_hp(player['level']) + self.get_equipment_bonuses(player)[2])
        self.save_players()
        logging.info(f"{user} —Å–Ω—è–ª {item_name} –∏–∑ —Å–ª–æ—Ç–∞ {slot}")

        await ctx.send(f'{ctx.author.name}, —Ç—ã —Å–Ω—è–ª "{item_name}" –∏–∑ —Å–ª–æ—Ç–∞ "{slot}".')

    @commands.command(name='–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å')
    async def cmd_use(self, ctx):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—É–µ–º—ã–π –ø—Ä–µ–¥–º–µ—Ç."""
        user = ctx.author.name.lower()
        parts = ctx.message.content.strip().split(maxsplit=1)

        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
            return

        if len(parts) < 2:
            await ctx.send(f'{ctx.author.name}, —É–∫–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç: !–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <–Ω–∞–∑–≤–∞–Ω–∏–µ>')
            return

        item_name = parts[1].strip()
        player = self.players[user]
        if item_name.lower() not in [i.lower() for i in player['inventory']]:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ "{item_name}".')
            return

        if item_name not in ITEMS or ITEMS[item_name]['slot'] != 'consumable':
            await ctx.send(f'{ctx.author.name}, –ø—Ä–µ–¥–º–µ—Ç "{item_name}" –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.')
            return

        effect = ITEMS[item_name].get('effect', {})
        if 'heal' in effect:
            max_hp = calculate_hp(player['level']) + self.get_equipment_bonuses(player)[2]
            old_hp = player['current_hp']
            player['current_hp'] = min(player['current_hp'] + effect['heal'], max_hp)
            player['inventory'].remove(item_name)
            self.save_players()
            logging.info(f"{user} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {item_name}, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {effect['heal']} HP")
            await ctx.send(f'{ctx.author.name}, —Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª "{item_name}" –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª {player['current_hp'] - old_hp} HP. –¢–µ–∫—É—â–∏–µ HP: {player['current_hp']}/{max_hp}.')

    @commands.command(name='–±–æ–π')
    async def cmd_fight(self, ctx):
        """–°—Ä–∞–∂–µ–Ω–∏–µ —Å –º–æ–Ω—Å—Ç—Ä–æ–º."""
        user = ctx.author.name.lower()
        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —Å–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é !—Å—Ç–∞—Ä—Ç.')
            return

        player = self.players[user]
        now = time.time()
        if player.get('prison', False) and player.get('prison_until', 0) > now:
            remain = int(player['prison_until'] - now)
            await ctx.send(f'@{ctx.author.name}, —Ç—ã –≤ —Ç—é—Ä—å–º–µ! –ó–∞–ø–ª–∞—Ç–∏ –≤–∑—è—Ç–∫—É (!–≤–∑—è—Ç–∫–∞) –∏–ª–∏ –∂–¥–∏ {remain} —Å–µ–∫.')
            return

        if not await self.check_cooldown(player, 'last_fight_time', 90, ctx):
            return

        parts = ctx.message.content.strip().split()
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∫–∏—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤
        monster_name = parts[1].capitalize() if len(parts) > 1 and parts[1].capitalize() in MONSTERS else random.choice(
            [k for k, v in MONSTERS.items() if not v.get('rare', False) or random.random() < 0.1]
        )
        base = MONSTERS[monster_name]
        level = player['level']
        scale_factor = 1 + (level - 1) * 0.25
        monster_hp = int(base['base_hp'] * scale_factor)
        monster_attack = int(base['base_attack'] * scale_factor)

        min_bonus, max_bonus, hp_bonus = self.get_equipment_bonuses(player)
        player_hp = calculate_hp(level) + hp_bonus
        current_hp = player.get('current_hp', player_hp)

        # –£—á—ë—Ç –±–∞—Ñ—Ñ–∞ —Ç–∞–≤–µ—Ä–Ω—ã
        attack_multiplier = 1.1 if player.get('attack_buff_until', 0) > now else 1.0

        log = [f'{ctx.author.name} —Å—Ä–∞–∂–∞–µ—Ç—Å—è —Å {monster_name}! (–ú–æ–Ω—Å—Ç—Ä: {monster_hp} HP, {monster_attack} ATK)']
        raund = 0

        while monster_hp > 0 and current_hp > 0:
            raund += 1
            total_attack = int((calculate_damage(level) + random.randint(min_bonus, max_bonus)) * attack_multiplier)
            monster_hp -= total_attack
            if monster_hp <= 0:
                break
            current_hp -= monster_attack

        if current_hp > 0:
            xp_reward = random.randint(*base['xp_reward'])
            gold_reward = random.randint(*base['gold_reward'])
            player['xp'] += xp_reward
            player['gold'] += gold_reward
            drop = random.choice(base['loot']) if base['loot'] and random.random() < base['loot_chance'] else None
            if drop:
                player['inventory'].append(drop)
            player['current_hp'] = min(current_hp + player_hp // 2, player_hp)
            leveled = self.try_level_up(player)
            self.save_players()
            logging.info(f"{user} –ø–æ–±–µ–¥–∏–ª {monster_name}, –ø–æ–ª—É—á–∏–ª {xp_reward} XP, {gold_reward} –∑–æ–ª–æ—Ç–∞, –¥—Ä–æ–ø: {drop}")

            msg = f'üèÜ –ü–æ–±–µ–¥–∞ –∑–∞ {raund} —Ö–æ–¥–æ–≤! +{xp_reward} XP, +{gold_reward} –∑–æ–ª–æ—Ç–∞.'
            if drop:
                msg += f' –î—Ä–æ–ø: {drop}.'
            log.append(msg)
            if leveled:
                log.append(f'üìà –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {player["level"]}')
        else:
            xp_loss = int(player['xp'] * 0.1)
            player['xp'] = max(0, player['xp'] - xp_loss)
            player['current_hp'] = player_hp // 2
            log.append(f'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç {monster_name}... –ü–æ—Ç–µ—Ä—è–Ω–æ {xp_loss} XP')
            self.save_players()
            logging.info(f"{user} –ø—Ä–æ–∏–≥—Ä–∞–ª {monster_name}, –ø–æ—Ç–µ—Ä—è–Ω–æ {xp_loss} XP")

        for l in log:
            await ctx.send(l)

    @commands.command(name='—Ç–æ–ø')
    async def cmd_top(self, ctx):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é –∏ XP."""
        if not self.players:
            await ctx.send('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞.')
            return
        top = sorted(self.players.items(), key=lambda i: (i[1]['level'], i[1]['xp']), reverse=True)[:10]
        result = ', '.join([f'{i + 1}. {name} (Lvl {p["level"]}, XP {p["xp"]})' for i, (name, p) in enumerate(top)])
        await ctx.send(f'üèÜ –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤: {result}')

    @commands.command(name='–¥—É—ç–ª—å')
    async def cmd_duel(self, ctx):
        """–í—ã–∑–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –¥—É—ç–ª—å."""
        challenger = ctx.author.name.lower()
        parts = ctx.message.content.strip().split()

        if len(parts) < 2:
            await ctx.send('–§–æ—Ä–º–∞—Ç: !–¥—É—ç–ª—å @–Ω–∏–∫ [—Å—Ç–∞–≤–∫–∞]')
            return

        target = parts[1].lstrip('@').lower()
        amount = int(parts[2]) if len(parts) >= 3 and parts[2].isdigit() and int(parts[2]) >= 0 else 0

        if challenger == target:
            await ctx.send('–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.')
            return

        if challenger not in self.players or target not in self.players:
            await ctx.send('–û–±–∞ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.')
            return

        if self.players[challenger]['gold'] < amount:
            await ctx.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏.')
            return

        if target in self.pending_duels:
            await ctx.send(f'{target} —É–∂–µ –æ–∂–∏–¥–∞–µ—Ç –¥—Ä—É–≥–æ–π –¥—É—ç–ª–∏.')
            return

        cl = self.players[challenger]
        tl = self.players[target]
        chp = calculate_hp(cl['level']) + self.get_equipment_bonuses(cl)[2]
        thp = calculate_hp(tl['level']) + self.get_equipment_bonuses(tl)[2]
        cdmg = f'{5 + cl["level"] * 2 + self.get_equipment_bonuses(cl)[0]}-{10 + cl["level"] * 3 + self.get_equipment_bonuses(cl)[1]}'
        tdmg = f'{5 + tl["level"] * 2 + self.get_equipment_bonuses(tl)[0]}-{10 + tl["level"] * 3 + self.get_equipment_bonuses(tl)[1]}'

        self.pending_duels[target] = {'challenger': challenger, 'amount': amount}
        await ctx.send(
            f'‚öîÔ∏è {ctx.author.name} –≤—ã–∑—ã–≤–∞–µ—Ç @{target} –Ω–∞ –¥—É—ç–ª—å{" —Å–æ —Å—Ç–∞–≤–∫–æ–π " + str(amount) + " –∑–æ–ª–æ—Ç–∞" if amount else ""}!\n'
            f'{ctx.author.name}: HP {chp}, –£—Ä–æ–Ω {cdmg}; @{target}: HP {thp}, –£—Ä–æ–Ω {tdmg}\n'
            f'@{target}, –Ω–∞–ø–∏—à–∏ !–ø—Ä–∏–Ω—è—Ç—å —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤.'
        )
        logging.info(f"{challenger} –≤—ã–∑–≤–∞–ª {target} –Ω–∞ –¥—É—ç–ª—å —Å —Å—Ç–∞–≤–∫–æ–π {amount}")

    @commands.command(name='–ø—Ä–∏–Ω—è—Ç—å')
    async def cmd_accept(self, ctx):
        """–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å."""
        defender = ctx.author.name.lower()
        if defender not in self.players:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
            return

        now = time.time()
        if self.players[defender].get('prison', False) and self.players[defender].get('prison_until', 0) > now:
            remain = int(self.players[defender]['prison_until'] - now)
            await ctx.send(f'@{ctx.author.name}, —Ç—ã –≤ —Ç—é—Ä—å–º–µ! –ó–∞–ø–ª–∞—Ç–∏ –≤–∑—è—Ç–∫—É (!–≤–∑—è—Ç–∫–∞) –∏–ª–∏ –∂–¥–∏ {remain} —Å–µ–∫.')
            return

        if defender not in self.pending_duels:
            await ctx.send('–¢–µ–±—è –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–∑—ã–≤–∞–ª –Ω–∞ –¥—É—ç–ª—å.')
            return

        duel = self.pending_duels.pop(defender)
        challenger = duel['challenger']
        amount = duel['amount']

        if challenger not in self.players:
            await ctx.send('–ò–≥—Ä–æ–∫-–≤—ã–∑—ã–≤–∞—é—â–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return

        a = self.players[challenger]
        d = self.players[defender]
        if not await self.check_cooldown(a, 'last_pvp_time', 60, ctx) or not await self.check_cooldown(d, 'last_pvp_time', 60, ctx):
            return

        if amount > 0 and (a['gold'] < amount or d['gold'] < amount):
            await ctx.send('–£ –∫–æ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç–∞.')
            return

        if amount > 0:
            a['gold'] -= amount
            d['gold'] -= amount

        min_bonus_a, max_bonus_a, hp_bonus_a = self.get_equipment_bonuses(a)
        min_bonus_d, max_bonus_d, hp_bonus_d = self.get_equipment_bonuses(d)
        hp1 = a.get('current_hp', calculate_hp(a['level']) + hp_bonus_a)
        hp2 = d.get('current_hp', calculate_hp(d['level']) + hp_bonus_d)

        attack_multiplier_a = 1.1 if a.get('attack_buff_until', 0) > now else 1.0
        attack_multiplier_d = 1.1 if d.get('attack_buff_until', 0) > now else 1.0

        attacker_name, defender_name = (challenger, defender) if random.random() < 0.5 else (defender, challenger)
        attacker_p, defender_p = (a, d) if attacker_name == challenger else (d, a)
        hp_attacker, hp_defender = (hp1, hp2) if attacker_name == challenger else (hp2, hp1)
        attacker_bonus = (min_bonus_a, max_bonus_a) if attacker_name == challenger else (min_bonus_d, max_bonus_d)
        defender_bonus = (min_bonus_d, max_bonus_d) if attacker_name == challenger else (min_bonus_a, max_bonus_a)
        attacker_multiplier = attack_multiplier_a if attacker_name == challenger else attack_multiplier_d
        defender_multiplier = attack_multiplier_d if attacker_name == challenger else attack_multiplier_a

        def dmg(p, min_b, max_b, multiplier):
            base = calculate_damage(p['level'])
            bonus = random.randint(min_b, max_b)
            return int((base + bonus) * multiplier)

        round_num = 1
        while True:
            damage = dmg(attacker_p, *attacker_bonus, attacker_multiplier)
            hp_defender -= damage
            if hp_defender <= 0:
                winner, loser = attacker_name, defender_name
                winner_p, loser_p = attacker_p, defender_p
                break

            damage = dmg(defender_p, *defender_bonus, defender_multiplier)
            hp_attacker -= damage
            if hp_attacker <= 0:
                winner, loser = defender_name, attacker_name
                winner_p, loser_p = attacker_p, defender_p
                break

            round_num += 1

        winner_p['current_hp'] = max(1, hp_attacker if winner == attacker_name else hp_defender)
        loser_p['current_hp'] = calculate_hp(loser_p['level']) + self.get_equipment_bonuses(loser_p)[2] // 2

        gold_msg = f' –∏ {amount * 2} –∑–æ–ª–æ—Ç–∞' if amount > 0 else ''
        xp = 10 * loser_p['level']
        winner_p['xp'] += xp
        level_msg = ''
        if self.try_level_up(winner_p):
            level_msg = f'üìà {winner} –ø–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å! –¢–µ–ø–µ—Ä—å —É—Ä–æ–≤–µ–Ω—å {winner_p["level"]}.'

        winner_p['pvp_wins'] = winner_p.get('pvp_wins', 0) + 1
        loser_p['pvp_losses'] = loser_p.get('pvp_losses', 0) + 1
        if amount > 0:
            winner_p['gold'] += amount * 2
        self.save_players()
        logging.info(f"–î—É—ç–ª—å: {winner} –ø–æ–±–µ–¥–∏–ª {loser}, –ø–æ–ª—É—á–∏–ª {xp} XP{gold_msg}")

        await ctx.send(f'üèÅ –ü–æ–±–µ–∂–¥–∞–µ—Ç {winner}, –ø–æ–ª—É—á–∞–µ—Ç {xp} XP{gold_msg}!')
        if level_msg:
            await ctx.send(level_msg)

    @commands.command(name='–æ—Ç–º–µ–Ω–∞')
    async def cmd_cancel_duel(self, ctx):
        """–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å."""
        user = ctx.author.name.lower()
        if user in self.pending_duels:
            self.pending_duels.pop(user)
            await ctx.send(f'{ctx.author.name}, —Ç–≤–æ–π –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å –æ—Ç–º–µ–Ω—ë–Ω.')
            logging.info(f"{user} –æ—Ç–º–µ–Ω–∏–ª –≤—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å")
            return

        for target, duel in list(self.pending_duels.items()):
            if duel['challenger'] == user:
                self.pending_duels.pop(target)
                await ctx.send(f'{ctx.author.name}, —Ç—ã –æ—Ç–º–µ–Ω–∏–ª –≤—ã–∑–æ–≤ –¥—É—ç–ª–∏ @{target}.')
                logging.info(f"{user} –æ—Ç–º–µ–Ω–∏–ª –≤—ã–∑–æ–≤ –¥—É—ç–ª–∏ –¥–ª—è {target}")
                return
        await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ –¥—É—ç–ª—å.')

    @commands.command(name='–ø–≤–ø')
    async def cmd_pvp_stats(self, ctx):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É PvP."""
        user = ctx.author.name.lower()
        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
            return
        p = self.players[user]
        wins = p.get('pvp_wins', 0)
        losses = p.get('pvp_losses', 0)
        total = wins + losses
        winrate = f"{(wins / total * 100):.1f}%" if total > 0 else "‚Äì"
        await ctx.send(f'{ctx.author.name}, PvP: –ü–æ–±–µ–¥—ã: {wins}, –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {losses}, Winrate: {winrate}')

    @commands.command(name='–æ–ø–∏—Å–∞–Ω–∏–µ')
    async def cmd_description(self, ctx):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞."""
        parts = ctx.message.content.strip().split(maxsplit=1)
        user = ctx.author.name.lower()

        if len(parts) == 2:
            item_name = parts[1].strip().lower()
            description = ITEM_DESCRIPTIONS.get(item_name)
            if description:
                await ctx.send(f'–û–ø–∏—Å–∞–Ω–∏–µ {parts[1].strip()}: {description}')
            else:
                await ctx.send(f'{ctx.author.name}, –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è "{parts[1].strip()}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
            return

        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
            return

        inventory = self.players[user].get('inventory', [])
        if not inventory:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –ø—É—Å—Ç–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.')
            return

        unique_items = list(set(inventory))
        if len(unique_items) == 1:
            item_name = unique_items[0].lower()
            description = ITEM_DESCRIPTIONS.get(item_name)
            if description:
                await ctx.send(f'–û–ø–∏—Å–∞–Ω–∏–µ {unique_items[0]}: {description}')
            else:
                await ctx.send(f'{ctx.author.name}, –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è "{unique_items[0]}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        else:
            await ctx.send(f'{ctx.author.name}, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞: !–æ–ø–∏—Å–∞–Ω–∏–µ <–Ω–∞–∑–≤–∞–Ω–∏–µ>. '
                           f'–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {", ".join(unique_items)}')

    @commands.command(name='–±–æ—Ä–¥–µ–ª—å')
    async def cmd_brothel(self, ctx):
        """–ü–æ—Å–µ—Ç–∏—Ç—å –±–æ—Ä–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞—Ñ—Ñ–∞ –∏–ª–∏ —à—Ç—Ä–∞—Ñ–∞."""
        user = ctx.author.name.lower()
        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (!—Å—Ç–∞—Ä—Ç).')
            return

        player = self.players[user]
        cost = 100
        now = time.time()

        if player['gold'] < cost:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ (–Ω—É–∂–Ω–æ {cost}).')
            return

        if player.get('xp_buff_until', 0) > now:
            await ctx.send(f'{ctx.author.name}, —ç—Ñ—Ñ–µ–∫—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ –æ–Ω –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è.')
            return

        player['gold'] -= cost
        if random.random() < 0.25:
            player['xp_penalty'] = True
            await ctx.send(
                f'üíã {ctx.author.name}, —Ç—ã –ø–æ–¥—Ü–µ–ø–∏–ª —á—Ç–æ-—Ç–æ... XP —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –Ω–∞ 50%! –ò—Å–ø–æ–ª—å–∑—É–π !–ª–µ—á–∏—Ç—å—Å—è –∑–∞ 50 –∑–æ–ª–æ—Ç–∞.')
            logging.info(f"{user} –ø–æ–ª—É—á–∏–ª —à—Ç—Ä–∞—Ñ XP –≤ –±–æ—Ä–¥–µ–ª–µ")
        else:
            player['xp_buff_until'] = now + 1800
            await ctx.send(
                f'üíÉ {ctx.author.name}, —Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω! –í —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç +50% XP.')
            logging.info(f"{user} –ø–æ–ª—É—á–∏–ª –±–∞—Ñ—Ñ XP –≤ –±–æ—Ä–¥–µ–ª–µ")
        self.save_players()

    @commands.command(name='–ª–µ—á–∏—Ç—å—Å—è')
    async def cmd_heal(self, ctx):
        """–í—ã–ª–µ—á–∏—Ç—å—Å—è –æ—Ç —à—Ç—Ä–∞—Ñ–∞ –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –±–æ—Ä–¥–µ–ª—è."""
        user = ctx.author.name.lower()
        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
            return

        player = self.players[user]
        cost = 50

        if not player.get('xp_penalty'):
            await ctx.send(f'{ctx.author.name}, —Ç–µ–±–µ –Ω–µ –Ω—É–∂–Ω–æ –ª–µ—á–µ–Ω–∏–µ.')
            return

        if player['gold'] < cost:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ (–Ω—É–∂–Ω–æ {cost}).')
            return

        player['gold'] -= cost
        player['xp_penalty'] = False
        self.save_players()
        logging.info(f"{user} –≤—ã–ª–µ—á–∏–ª—Å—è –æ—Ç —à—Ç—Ä–∞—Ñ–∞ XP")
        await ctx.send(f'üßº {ctx.author.name}, —Ç—ã –≤—ã–ª–µ—á–∏–ª—Å—è –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º!')

    @commands.command(name='–ø—Ä–æ–¥–∞—Ç—å')
    async def cmd_sell(self, ctx):
        """–ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."""
        user = ctx.author.name.lower()
        parts = ctx.message.content.strip().split(maxsplit=1)

        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
            return

        if len(parts) != 2:
            await ctx.send(f'{ctx.author.name}, —É–∫–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç: !–ø—Ä–æ–¥–∞—Ç—å <–Ω–∞–∑–≤–∞–Ω–∏–µ>')
            return

        item_name = parts[1].strip()
        player = self.players[user]
        if item_name.lower() not in [i.lower() for i in player['inventory']]:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ "{item_name}".')
            return

        if item_name not in ITEMS or 'price' not in ITEMS[item_name]:
            await ctx.send(f'{ctx.author.name}, —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å.')
            return

        sell_price = ITEMS[item_name]['price'] // 2
        player['inventory'].remove(item_name)
        player['gold'] += sell_price
        self.save_players()
        logging.info(f"{user} –ø—Ä–æ–¥–∞–ª {item_name} –∑–∞ {sell_price} –∑–æ–ª–æ—Ç–∞")
        await ctx.send(f'{ctx.author.name}, —Ç—ã –ø—Ä–æ–¥–∞–ª "{item_name}" –∑–∞ {sell_price} –∑–æ–ª–æ—Ç–∞.')

    @commands.command(name='–æ—Ü–µ–Ω–∏—Ç—å')
    async def cmd_appraise(self, ctx):
        """–û—Ü–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞."""
        user = ctx.author.name.lower()
        parts = ctx.message.content.strip().split(maxsplit=1)

        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
            return

        if len(parts) < 2:
            await ctx.send(f'{ctx.author.name}, —É–∫–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç: !–æ—Ü–µ–Ω–∏—Ç—å <–Ω–∞–∑–≤–∞–Ω–∏–µ>')
            return

        item_name = parts[1].strip()
        if item_name.lower() not in [i.lower() for i in self.players[user]['inventory']]:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ "{item_name}".')
            return

        if item_name not in ITEMS:
            await ctx.send(f'{ctx.author.name}, –ø—Ä–µ–¥–º–µ—Ç "{item_name}" –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –ø—Ä–æ–¥–∞–∂–µ.')
            return

        price = ITEMS[item_name].get('price', 0)
        sell_price = max(price // 2, 1)
        await ctx.send(f'{ctx.author.name}, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–∞—Ç—å "{item_name}" –∑–∞ {sell_price} –∑–æ–ª–æ—Ç–∞.')

    @commands.command(name='–∫—Ä–∞–∂–∞')
    async def cmd_steal(self, ctx):
        """–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–∫—Ä–∞—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç —É –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞."""
        user = ctx.author.name.lower()
        parts = ctx.message.content.strip().split(maxsplit=2)

        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
            return

        if len(parts) < 3:
            await ctx.send(f'{ctx.author.name}, —Ñ–æ—Ä–º–∞—Ç: !–∫—Ä–∞–∂–∞ @–Ω–∏–∫ <–ø—Ä–µ–¥–º–µ—Ç>')
            return

        target = parts[1].lstrip('@').lower()
        item_name = parts[2].strip()

        if target == user:
            await ctx.send(f'{ctx.author.name}, –Ω–µ–ª—å–∑—è —É–∫—Ä–∞—Å—Ç—å —É —Å–µ–±—è.')
            return

        if target not in self.players:
            await ctx.send(f'{target} –Ω–µ –∏–º–µ–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
            return

        player = self.players[user]
        now = time.time()
        if not await self.check_cooldown(player, 'steal_time_unteal', 300, ctx):
            return

        if item_name.lower() not in [i.lower() for i in self.players[target]['inventory']]:
            await ctx.send(f'{ctx.author.name}, —É @{target} –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ "{item_name}".')
            return

        steal_chance = 0.1 + (self.classes[player.get('class', '')].get('steal_chance_bonus', 0) if player.get('class') else 0)
        if player['equipment'].get('amulet') == '–ê–º—É–ª–µ—Ç —É–¥–∞—á–∏':
            steal_chance += ITEMS['–ê–º—É–ª–µ—Ç —É–¥–∞—á–∏']['effect']['steal_chance_bonus']

        if random.random() < steal_chance:
            player['inventory'].append(item_name)
            self.players[target]['inventory'].remove(item_name)
            await ctx.send(f'{ctx.author.name}, {item_name} —É—Å–ø–µ—à–Ω–æ —É–∫—Ä–∞–¥–µ–Ω —É @{target}!')
            logging.info(f"{user} —É–∫—Ä–∞–ª {item_name} —É {target}")
        else:
            player['prison'] = True
            player['prison_until'] = now + 300
            await ctx.send(f'@{ctx.author.name}, –∫—Ä–∞–∂–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —Ç–µ–±—è —Å—Ö–≤–∞—Ç–∏–ª–∞ —Å—Ç—Ä–∞–∂–∞! –¢—ã –≤ —Ç—é—Ä—å–º–µ –Ω–∞ 5 –º–∏–Ω—É—Ç.')
            logging.info(f"{user} –ø—Ä–æ–≤–∞–ª–∏–ª –∫—Ä–∞–∂—É, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç—é—Ä—å–º—É")
        self.save_players()

    @commands.command(name='–≤–∑—è—Ç–∫–∞')
    async def cmd_prison(self, ctx):
        """–ó–∞–ø–ª–∞—Ç–∏—Ç—å –≤–∑—è—Ç–∫—É –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ç—é—Ä—å–º—ã."""
        user = ctx.author.name.lower()
        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
            return

        player = self.players[user]
        now = time.time()
        if not player.get('prison', False) or player.get('prison_until', 0) <= now:
            await ctx.send(f'{ctx.author.name}, —Ç—ã –Ω–µ –≤ —Ç—é—Ä—å–º–µ.')
            return

        cost = 50
        if player['gold'] < cost:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ (–Ω—É–∂–Ω–æ {cost}).')
            return

        player['gold'] -= cost
        player['prison'] = False
        player['prison_until'] = 0
        self.save_players()
        logging.info(f"{user} –∑–∞–ø–ª–∞—Ç–∏–ª –≤–∑—è—Ç–∫—É –∏ –≤—ã—à–µ–ª –∏–∑ —Ç—é—Ä—å–º—ã")
        await ctx.send(f'@{ctx.author.name}, —Ç—ã —Å–≤–æ–±–æ–¥–µ–Ω!')

    @commands.command(name='—Ç–∞–≤–µ—Ä–Ω–∞')
    async def cmd_tavern(self, ctx):
        """–ü–æ—Å–µ—Ç–∏—Ç—å —Ç–∞–≤–µ—Ä–Ω—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞—Ñ—Ñ–∞ –Ω–∞ —É—Ä–æ–Ω."""
        user = ctx.author.name.lower()
        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (!—Å—Ç–∞—Ä—Ç).')
            return

        player = self.players[user]
        cost = 50
        now = time.time()

        if player.get('attack_buff_until', 0) > now:
            await ctx.send(f'{ctx.author.name}, –±–∞—Ñ—Ñ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ –æ–Ω –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è.')
            return

        if player['gold'] < cost:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ (–Ω—É–∂–Ω–æ {cost}).')
            return

        player['gold'] -= cost
        player['attack_buff_until'] = now + 1800
        self.save_players()
        logging.info(f"{user} –ø–æ–ª—É—á–∏–ª –±–∞—Ñ—Ñ —É—Ä–æ–Ω–∞ –≤ —Ç–∞–≤–µ—Ä–Ω–µ")
        await ctx.send(f'üç∫ {ctx.author.name}, —Ç—ã –æ—Ç–¥–æ—Ö–Ω—É–ª –≤ —Ç–∞–≤–µ—Ä–Ω–µ! –í —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç +10% —É—Ä–æ–Ω–∞.')

    @commands.command(name='—Ä–∞—Å–∞')
    async def cmd_race(self, ctx):
        """–í—ã–±—Ä–∞—Ç—å —Ä–∞—Å—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        user = ctx.author.name.lower()
        parts = ctx.message.content.strip().split(maxsplit=1)

        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (!—Å—Ç–∞—Ä—Ç).')
            return

        player = self.players[user]
        if len(parts) < 2:
            races = ', '.join(self.races.keys())
            await ctx.send(f'{ctx.author.name}, —É–∫–∞–∂–∏ —Ä–∞—Å—É: !—Ä–∞—Å–∞ <–Ω–∞–∑–≤–∞–Ω–∏–µ>. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—ã: {races}')
            return

        race = parts[1].strip().lower()
        if race not in self.races:
            await ctx.send(f'{ctx.author.name}, —Ä–∞—Å–∞ "{race}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
            return

        if player.get('race'):
            await ctx.send(f'{ctx.author.name}, —Ç—ã —É–∂–µ –≤—ã–±—Ä–∞–ª —Ä–∞—Å—É: {player["race"]}.')
            return

        player['race'] = race
        # –û–±–Ω–æ–≤–ª—è–µ–º HP –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞—Å—ã
        player['current_hp'] = calculate_hp(player['level']) + self.get_equipment_bonuses(player)[2]
        self.save_players()
        logging.info(f"{user} –≤—ã–±—Ä–∞–ª —Ä–∞—Å—É {race}")
        await ctx.send(f'{ctx.author.name}, —Ç—ã –≤—ã–±—Ä–∞–ª —Ä–∞—Å—É: {race.capitalize()}.')

    @commands.command(name='–∫–ª–∞—Å—Å')
    async def cmd_class(self, ctx):
        """–í—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        user = ctx.author.name.lower()
        parts = ctx.message.content.strip().split(maxsplit=1)

        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (!—Å—Ç–∞—Ä—Ç).')
            return

        player = self.players[user]
        if len(parts) < 2:
            classes = ', '.join(self.classes.keys())
            await ctx.send(f'{ctx.author.name}, —É–∫–∞–∂–∏ –∫–ª–∞—Å—Å: !–∫–ª–∞—Å—Å <–Ω–∞–∑–≤–∞–Ω–∏–µ>. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {classes}')
            return

        class_name = parts[1].strip().lower()
        if class_name not in self.classes:
            await ctx.send(f'{ctx.author.name}, –∫–ª–∞—Å—Å "{class_name}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
            return

        if player.get('class'):
            await ctx.send(f'{ctx.author.name}, —Ç—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –∫–ª–∞—Å—Å: {player["class"]}.')
            return

        player['class'] = class_name
        # –û–±–Ω–æ–≤–ª—è–µ–º HP –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–ª–∞—Å—Å–∞
        player['current_hp'] = calculate_hp(player['level']) + self.get_equipment_bonuses(player)[2]
        self.save_players()
        logging.info(f"{user} –≤—ã–±—Ä–∞–ª –∫–ª–∞—Å—Å {class_name}")
        await ctx.send(f'{ctx.author.name}, —Ç—ã –≤—ã–±—Ä–∞–ª –∫–ª–∞—Å—Å: {class_name.capitalize()}.')

    @commands.command(name='–æ—Ç–¥—ã—Ö')
    async def cmd_full_heal(self, ctx):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å HP –∑–∞ 5 –∑–æ–ª–æ—Ç–∞."""
        user = ctx.author.name.lower()
        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
            return

        player = self.players[user]
        cost = 5
        max_hp = calculate_hp(player['level']) + self.get_equipment_bonuses(player)[2]

        if player['current_hp'] >= max_hp:
            await ctx.send(f'{ctx.author.name}, —Ç–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –∏ —Ç–∞–∫ –ø–æ–ª–Ω–æ–µ!')
            return

        if player['gold'] < cost:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ (–Ω—É–∂–Ω–æ {cost}).')
            return

        player['gold'] -= cost
        player['current_hp'] = max_hp
        self.save_players()
        logging.info(f"{user} –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª HP –∑–∞ {cost} –∑–æ–ª–æ—Ç–∞")
        await ctx.send(f'ü©∫ {ctx.author.name}, —Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª HP –∑–∞ {cost} –∑–æ–ª–æ—Ç–∞!')

    @commands.command(name='–ø–æ–¥–∞—Ä–∏—Ç—å')
    async def cmd_gift(self, ctx):
        """–ü–æ–¥–∞—Ä–∏—Ç—å –ª—é–±–æ–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É"""
        user = ctx.author.name.lower()
        player = self.players[user]
        parts = ctx.message.content.strip().split(maxsplit=2)

        if user not in self.players:
            await ctx.send(f'{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
            return

        if len(parts) != 3:
            await ctx.send(f'@{user}, —Ñ–æ—Ä–º–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞: !–ø–æ–¥–∞—Ä–æ–∫ <–∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è>')
            return

        if len(parts) == 3:
            target = parts[1].lstrip('@').lower()
            item = parts[2].capitalize()
            item_slpit = item.split()
            if target not in self.players:
                await ctx.send(f'@{user}, {target} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!')
                return
            if item_slpit[0] == '–ó–æ–ª–æ—Ç–æ':
                if item_slpit[1].isalpha():
                    await ctx.send(f'@{user}, —Ç—ã —Ö–æ—Ç—å —Å–∞–º –ø–æ–Ω—è–ª —á—Ç–æ —Ö–æ—á–µ—à—å?)')
                    return
                if int(item_slpit[1]) <= player['gold']:
                    self.players[target]['gold'] += int(item_slpit[1])
                    player['gold'] -= int(item_slpit[1])
                    self.save_players()
                    await ctx.send(f'@{user} –ø–æ–¥–∞—Ä–∏–ª @{target} {int(item_slpit[1])} –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç!')
                    return
                elif int(item_slpit[1]) > player['gold']:
                    await ctx.send(f'@{user}, —É —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –∑–æ–ª–æ—Ç–∞!')
                    return

            if item in player['inventory']:
                self.players[target]['inventory'].append(item)
                player['inventory'].remove(item)
                self.save_players()
                await ctx.send(f'@{user} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª @{target} –ø—Ä–µ–¥–º–µ—Ç {item}')
                return

            if item not in player['inventory']:
                await ctx.send(f'@{user}, —É —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!')
                return

# async def main():
#     """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
#     bot = RPGbot()
#     await bot.start()
#
# if __name__ == "__main__":
#     asyncio.run(main())
bot = RPGbot()
bot.run()